module IMPOR(
	output reg [2:0] out,
	output reg out_valid,
	output reg ready,
	input  [2:0] in,
	input  [2:0] mode,
	input  in_valid,
	input  clk,
	input  rst_n
);

reg [2:0] sta10, sta11, sta12, sta13, sta14, sta15, sta16, sta17, sta18;
wire [2:0] sta20, sta21, sta22, sta23, sta24, sta25, sta26, sta27, sta28;
reg [20:0] cnt1, cnt2;
reg rst;

assign sta20 = sta10;
assign sta21 = sta11;
assign sta22 = sta12;
assign sta23 = sta13;
assign sta24 = sta14;
assign sta25 = sta15;
assign sta26 = sta16;
assign sta27 = sta17;
assign sta28 = sta18;

// rst
always@(posedge clk or negedge rst_n) begin
	if(rst_n == 0) rst <= 0;
	else if(rst == 1) rst <= 0;
	else if(cnt2 == 10) rst <= 1;
	else;
end // end of always

// ready
always@(posedge clk or negedge rst_n) begin
	if(rst_n == 0) ready <= 1;
	else if(rst == 1) ready <= 1;
	else if(out_valid == 1) ready <= 0;
	else;
end // end of always

// cnt1
always@(posedge clk or negedge rst_n) begin
	if(rst_n == 0) cnt1 <= 0;
	else if(rst == 1) cnt1 <= 0;
	else if(in_valid == 1) cnt1 <= cnt1+1;
	else;
end // end of always

// cnt2
always@(posedge clk or negedge rst_n) begin
	if(rst_n == 0) cnt2 <= 0;
	else if(rst == 1) cnt2 <= 0;
	else if(cnt1 > 0 && in_valid == 0) cnt2 <= cnt2+1;
	else;
end // end of always

// sta10
always@(posedge clk or negedge rst_n) begin
	if(rst_n == 0) sta10 <= 0;
	else if(rst == 1) sta10 <= 0;
	else if(in_valid == 1) begin
		if(cnt1 == 0) sta10 <= in;
		else if(cnt1 > 8) begin
			case(mode)
				1: sta10 <= sta22;
				2: sta10 <= sta26;
				3: sta10 <= sta22;
				4: sta10 <= sta26;
				5: begin
					if(sta20 == 7) sta10 <= sta20;
					else sta10 <= sta20+1;
				end
				6: sta10 <= sta20;
				7: sta10 <= sta20;
				default: sta10 <= sta20;
			endcase
		end else;
	end else;
end // end of always
// sta11
always@(posedge clk or negedge rst_n) begin
	if(rst_n == 0) sta11 <= 0;
	else if(rst == 1) sta11 <= 0;
	else if(in_valid == 1) begin
		if(cnt1 == 1) sta11 <= in;
		else if(cnt1 > 8) begin
			case(mode)
				1: sta11 <= sta21;
				2: sta11 <= sta27;
				3: sta11 <= sta25;
				4: sta11 <= sta23;
				5: sta11 <= sta21;
				6: begin
					if(sta21 == 7) sta11 <= sta21;
					else sta11 <= sta21+1;
				end
				7: sta11 <= sta21;
				default: sta11 <= sta21;
			endcase
		end else;
	end else;
end // end of always
// sta12
always@(posedge clk or negedge rst_n) begin
	if(rst_n == 0) sta12 <= 0;
	else if(rst == 1) sta12 <= 0;
	else if(in_valid == 1) begin
		if(cnt1 == 2) sta12 <= in;
		else if(cnt1 > 8) begin
			case(mode)
				1: sta12 <= sta20;
				2: sta12 <= sta28;
				3: sta12 <= sta28;
				4: sta12 <= sta20;
				5: sta12 <= sta22;
				6: sta12 <= sta22;
				7: begin
					if(sta22 == 7) sta12 <= sta22;
					else sta12 <= sta22+1;
				end
				default: sta12 <= sta22;
			endcase
		end else;
	end else;
end // end of always
// sta13
always@(posedge clk or negedge rst_n) begin
	if(rst_n == 0) sta13 <= 0;
	else if(rst == 1) sta13 <= 0;
	else if(in_valid == 1) begin
		if(cnt1 == 3) sta13 <= in;
		else if(cnt1 > 8) begin
			case(mode)
				1: sta13 <= sta25;
				2: sta13 <= sta23;
				3: sta13 <= sta21;
				4: sta13 <= sta27;
				5: begin
					if(sta23 == 7) sta13 <= sta23;
					else sta13 <= sta23+1;
				end
				6: sta13 <= sta23;
				7: sta13 <= sta23;
				default: sta13 <= sta23;
			endcase
		end else;
	end else;
end // end of always
// sta14
always@(posedge clk or negedge rst_n) begin
	if(rst_n == 0) sta14 <= 0;
	else if(rst == 1) sta14 <= 0;
	else if(in_valid == 1) begin
		if(cnt1 == 4) sta14 <= in;
		else if(cnt1 > 8) begin
			case(mode)
				1: sta14 <= sta24;
				2: sta14 <= sta24;
				3: sta14 <= sta24;
				4: sta14 <= sta24;
				5: sta14 <= sta24;
				6: begin
					if(sta24 == 7) sta14 <= sta24;
					else sta14 <= sta24+1;
				end
				7: sta14 <= sta24;
				default: sta14 <= sta24;
			endcase
		end else;
	end else;
end // end of always
// sta15
always@(posedge clk or negedge rst_n) begin
	if(rst_n == 0) sta15 <= 0;
	else if(rst == 1) sta15 <= 0;
	else if(in_valid == 1) begin
		if(cnt1 == 5) sta15 <= in;
		else if(cnt1 > 8) begin
			case(mode)
				1: sta15 <= sta23;
				2: sta15 <= sta25;
				3: sta15 <= sta27;
				4: sta15 <= sta21;
				5: sta15 <= sta25;
				6: sta15 <= sta25;
				7: begin
					if(sta25 == 7) sta15 <= sta25;
					else sta15 <= sta25+1;
				end
				default: sta15 <= sta25;
			endcase
		end else;
	end else;
end // end of always
// sta16
always@(posedge clk or negedge rst_n) begin
	if(rst_n == 0) sta16 <= 0;
	else if(rst == 1) sta16 <= 0;
	else if(in_valid == 1) begin
		if(cnt1 == 6) sta16 <= in;
		else if(cnt1 > 8) begin
			case(mode)
				1: sta16 <= sta28;
				2: sta16 <= sta20;
				3: sta16 <= sta20;
				4: sta16 <= sta28;
				5: begin
					if(sta26 == 7) sta16 <= sta26;
					else sta16 <= sta26+1;
				end
				6: sta16 <= sta26;
				7: sta16 <= sta26;
				default: sta16 <= sta26;
			endcase
		end else;
	end else;
end // end of always
// sta17
always@(posedge clk or negedge rst_n) begin
	if(rst_n == 0) sta17 <= 0;
	else if(rst == 1) sta17 <= 0;
	else if(in_valid == 1) begin
		if(cnt1 == 7) sta17 <= in;
		else if(cnt1 > 8) begin
			case(mode)
				1: sta17 <= sta27;
				2: sta17 <= sta21;
				3: sta17 <= sta23;
				4: sta17 <= sta25;
				5: sta17 <= sta27;
				6: begin
					if(sta27 == 7) sta17 <= sta27;
					else sta17 <= sta27+1;
				end
				7: sta17 <= sta27;
				default: sta17 <= sta27;
			endcase
		end else;
	end else;
end // end of always
// sta18
always@(posedge clk or negedge rst_n) begin
	if(rst_n == 0) sta18 <= 0;
	else if(rst == 1) sta18 <= 0;
	else if(in_valid == 1) begin
		if(cnt1 == 8) sta18 <= in;
		else if(cnt1 > 8) begin
			case(mode)
				1: sta18 <= sta26;
				2: sta18 <= sta22;
				3: sta18 <= sta26;
				4: sta18 <= sta22;
				5: sta18 <= sta28;
				6: sta18 <= sta28;
				7: begin
					if(sta28 == 7) sta18 <= sta28;
					else sta18 <= sta28+1;
				end
				default: sta18 <= sta28;
			endcase
		end else;
	end else;
end // end of always

// out
always@(posedge clk or negedge rst_n) begin
	if(rst_n == 0) out <= 0;
	else if(rst == 1) out <= 0;
	else if(cnt1 > 0 && in_valid == 0) begin
		case(cnt2)
			0: out <= sta10;
			1: out <= sta11;
			2: out <= sta12;
			3: out <= sta13;
			4: out <= sta14;
			5: out <= sta15;
			6: out <= sta16;
			7: out <= sta17;
			8: out <= sta18;
			default: out <= 0;
		endcase
	end else out <= 0;
end // end of always
// out_valid
always@(posedge clk or negedge rst_n) begin
	if(rst_n == 0) out_valid <= 0;
	else if(rst == 1) out_valid <= 0;
	else if(cnt1 > 0 && in_valid == 0 && cnt2 < 9) out_valid <= 1;
	else out_valid <= 0;
end // end of always

endmodule
